use crate::uefi::data_type::basic_type::EfiStatus;

pub const EFI_SUCCESS: EfiStatus = 0;
pub const EFI_WARN_UNKNOWN_GLYPH: EfiStatus = 1;
pub const EFI_LOAD_ERROR: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 1;
pub const EFI_INVALID_PARAMETER: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 2;
pub const EFI_UNSUPPORTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 3;
pub const EFI_BAD_BUFFER_SIZE: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 4;
pub const EFI_BUFFER_TOO_SMALL: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 5;
pub const EFI_NOT_READY: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 6;
pub const EFI_DEVICE_ERROR: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 7;
pub const EFI_WRITE_PROTECTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 8;
pub const EFI_OUT_OF_RESOURCES: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 9;
pub const EFI_VOLUME_CORRUPTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 10;
pub const EFI_VOLUME_FULL: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 11;
pub const EFI_NO_MEDIA: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 12;
pub const EFI_MEDIA_CHANGED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 13;
pub const EFI_NOT_FOUND: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 14;
pub const EFI_ACCESS_DENIED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 15;
pub const EFI_NO_RESPONSE: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 16;
pub const EFI_NO_MAPPING: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 17;
pub const EFI_TIMEOUT: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 18;
pub const EFI_NOT_STARTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 19;
pub const EFI_ALREADY_STARTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 20;
pub const EFI_ABORTED: EfiStatus = (1 << (EfiStatus::BITS - 1)) + 21;
